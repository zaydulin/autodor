# Generated by Django 4.2.4 on 2025-08-13 14:46

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import useraccount.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Сотрудники'), (1, 'Клиент')], default=1, verbose_name='Пол')),
                ('employee', models.PositiveSmallIntegerField(choices=[(0, 'Нет должности'), (1, 'Водитель'), (2, 'Менеджер'), (3, 'Посредник')], default=0, verbose_name='сотрудник')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=500, null=True, verbose_name='Телефон')),
                ('avatar', models.FileField(blank=True, default='default/user-nophoto.png', upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Аватар')),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'Мужской'), (2, 'Женский')], default=1, verbose_name='Пол')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('online', models.BooleanField(default=False, verbose_name='Онлайн')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('balance', models.PositiveSmallIntegerField(default='0', verbose_name='Баланс')),
                ('passport_issued_by_whom', models.TextField(blank=True, null=True, verbose_name='Кем выдан')),
                ('passport_date_of_issue', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('passport_the_sub_division_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код подрозделения')),
                ('passport_series_and_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Серия и номер')),
                ('passport_place_of_birth', models.TextField(blank=True, null=True, verbose_name='Место рождения')),
                ('passport_registration', models.TextField(blank=True, null=True, verbose_name='Прописка')),
                ('passport_image_1', models.FileField(blank=True, default='default/user-nophoto.png', upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Лицевая часть')),
                ('passport_image_2', models.FileField(blank=True, default='default/user-nophoto.png', upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Место прописки')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название организации')),
                ('company_director', models.CharField(blank=True, max_length=100, null=True, verbose_name='Руководитель')),
                ('company_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Юридический адрес')),
                ('company_nalogovaya', models.CharField(blank=True, max_length=100, null=True, verbose_name='Налоговый орган')),
                ('company_ogrn', models.CharField(blank=True, max_length=100, null=True, verbose_name='ОГРН')),
                ('company_inn', models.CharField(blank=True, max_length=100, null=True, verbose_name='ИНН')),
                ('company_kpp', models.CharField(blank=True, max_length=100, null=True, verbose_name='КПП')),
                ('company_data_registration', models.DateField(blank=True, null=True, verbose_name='Дата регистрации')),
                ('company_type_activity', models.TextField(blank=True, null=True, verbose_name='Основной вид деятельности')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Withdrawal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, null=True, verbose_name='Сумма')),
                ('type', models.SmallIntegerField(choices=[(0, 'Пополнение'), (1, 'Списание')], default=0, verbose_name='Пополнение/Списание')),
                ('create', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Выплата',
                'verbose_name_plural': 'Выплаты',
            },
        ),
        migrations.CreateModel(
            name='PersonalCards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.CharField(max_length=19, verbose_name='Карта')),
                ('discount', models.CharField(max_length=19, verbose_name='Скидка')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления карты')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Активная'), (2, 'Не активная')], default=2, verbose_name='Статус')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Стандарт'), (2, 'Професиональная'), (3, 'Вип')], default=1, verbose_name='Тип')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Личная карта',
                'verbose_name_plural': 'Личные карты',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Регистрация'), (2, 'Покупка'), (3, 'Сбросить пароль'), (4, 'Поддержка')], default=1, unique=True, verbose_name='Тип')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Не прочитан'), (2, 'Прочитан')], default=1, verbose_name='Статус')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')),
                ('message', models.TextField()),
                ('content_type', models.ForeignKey(limit_choices_to={'model__in': ('blogs', 'pages', 'categorysblogs', 'tagsblogs')}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомление',
            },
        ),
        migrations.CreateModel(
            name='Dictofone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('files', models.FileField(blank=True, upload_to=useraccount.models.get_user_dir, verbose_name=' Записи')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Запись',
                'verbose_name_plural': 'Записи',
            },
        ),
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.CharField(max_length=19, verbose_name='Карта')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления карты')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Активная'), (2, 'Не активная')], default=2, verbose_name='Статус')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cardowner', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Банковская карта',
                'verbose_name_plural': 'Банковские карты',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название')),
                ('information', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Закладка',
                'verbose_name_plural': 'Закладки',
            },
        ),
    ]
